"JustConsUnit""NothingNilUnit"(Just "Just", (["Cons", "Cons", "Cons"], ()))(Nothing, ([], ()))(Just 1, ([1, 2, 3], ()))Dumping case trees to Main.cases
Dumping case trees to Main.cases
Main.2860:1023:u' = [{arg:0}, {arg:1}, {arg:2}, {ext:0}]: (%con [unit] Builtin.MkUnit Just 0 [])
Main.2734:907:u' = [{arg:0}, {arg:1}, {arg:2}, {ext:0}]: (%con [unit] Builtin.MkUnit Just 0 [])
Main.2734:906:mb' = [{arg:0}, {arg:1}, {arg:2}, {ext:0}]: (%case !{ext:0} [(%concase [just] Prelude.Types.Just Just 1 [{e:1}] (%con [just] Prelude.Types.Just Just 1 ["Just"]))] Just !{ext:0})
Main.2734:905:lst' = [{arg:0}, {arg:1}, {arg:2}, {ext:0}]: (%case !{ext:0} [(%concase [cons] Prelude.Basics.(::) Just 1 [{e:1}, {e:2}] (%con [cons] Prelude.Basics.(::) Just 1 ["Cons", (Main.2734:905:lst' [!{arg:0}, !{arg:1}, !{arg:2}, !{e:2}])]))] Just !{ext:0})
Main.main = [{ext:0}]: (%let {act:1} (Prelude.IO.prim__putStr [(Prelude.Show.show [(Main.case001 [(%con [just] Prelude.Types.Just Just 1 [1]), ({csegen:1} []), (%con [unit] Builtin.MkUnit Just 0 [])])]), !{ext:0}]) (%let {act:2} (Prelude.IO.prim__putStr [(Prelude.Show.show [(Main.case001 [(%con [nothing] Prelude.Types.Nothing Just 0 []), (%con [nil] Prelude.Basics.Nil Just 0 []), (%con [unit] Builtin.MkUnit Just 0 [])])]), !{ext:0}]) (%let {act:3} (Prelude.IO.prim__putStr [(Prelude.Show.show [({csegen:20} []), (Main.case002 [(%con [just] Prelude.Types.Just Just 1 [1]), ({csegen:1} []), (%con [unit] Builtin.MkUnit Just 0 [])])]), !{ext:0}]) (%let {act:4} (Prelude.IO.prim__putStr [(Prelude.Show.show [({csegen:20} []), (Main.case002 [(%con [nothing] Prelude.Types.Nothing Just 0 []), (%con [nil] Prelude.Basics.Nil Just 0 []), (%con [unit] Builtin.MkUnit Just 0 [])])]), !{ext:0}]) (Prelude.IO.prim__putStr [(Prelude.Show.show [(%con [cons] Builtin.MkPair Just 0 [(%con [cons] Prelude.Show.MkShow Just 0 [(%lam x (Prelude.Show.show [({csegen:26} []), !x])), (%lam d (%lam x (Prelude.Show.showPrec [({csegen:26} []), !d, !x])))]), (%con [cons] Prelude.Show.MkShow Just 0 [(%lam x (Prelude.Show.show [({csegen:33} []), !x])), (%lam d (%lam x (Prelude.Show.showPrec [({csegen:33} []), !d, !x])))])]), (Main.case003 [(%con [just] Prelude.Types.Just Just 1 [1]), ({csegen:1} []), (%con [unit] Builtin.MkUnit Just 0 [])])]), !{ext:0}])))))
Main.case003 = [{arg:0}, {arg:1}, {arg:2}]: (%con [cons] Builtin.MkPair Just 0 [!{arg:0}, (%con [cons] Builtin.MkPair Just 0 [!{arg:1}, (Main.2860:1023:u' [!{arg:2}, !{arg:1}, !{arg:0}, !{arg:2}])])])
Main.case002 = [{arg:0}, {arg:1}, {arg:2}]: (%con [cons] Builtin.MkPair Just 0 [(Main.2734:906:mb' [!{arg:2}, !{arg:1}, !{arg:0}, !{arg:0}]), (%con [cons] Builtin.MkPair Just 0 [(Main.2734:905:lst' [!{arg:2}, !{arg:1}, !{arg:0}, !{arg:1}]), (Main.2734:907:u' [!{arg:2}, !{arg:1}, !{arg:0}, !{arg:2}])])])
Main.case001 = [{arg:0}, {arg:1}, {arg:2}]: (++ [(%case !{arg:0} [(%concase [just] Prelude.Types.Just Just 1 [{e:1}] "Just")] Just "Nothing"), (++ [(%case !{arg:1} [(%concase [cons] Prelude.Basics.(::) Just 1 [{e:2}, {e:3}] "Cons")] Just "Nil"), "Unit"])])
